#![feature(byte_slice_trim_ascii)]

use std::{
	env,
	fs::File,
	io::{
		self,
		BufRead,
		BufReader,
	},
	path::{
		Path,
		PathBuf,
	},
	process::Command,
};

fn read_shebang(p: &Path) -> io::Result<Option<Vec<u8>>> {
	let mut f = BufReader::new(File::open(p)?);
	let mut buf = Vec::with_capacity(1024);
	loop {
		buf.clear();
		if f.read_until(b'\n', &mut buf)? == 0 {
			break;
		}
		let s = buf.trim_ascii();
		if !s.is_empty() {
			let s = match s.strip_prefix(b"#!") {
				Some(x) => x.trim_ascii_start(),
				None => break,
			};
			if s.is_empty() {
				break;
			}
			return Ok(Some(s.to_vec()));
		}
	}

	Ok(None)
}

fn run() -> Result<i32, Box<dyn std::error::Error>> {
	let mut args = env::args_os().skip(1);
	let file = PathBuf::from(args.next().ok_or("no file is specified")?);
	let mut c = match read_shebang(&file)?.or_else(|| {
		file.extension().and_then(|ext| {
			ext.to_str().and_then(|ext| {
				env::var(format!("SHEBANG.{ext}"))
					.ok()
					.map(String::into_bytes)
			})
		})
	}) {
		None => {
			let mut c = Command::new(&file);
			c.args(args);
			c
		}
		Some(s) => {
			let s = String::from_utf8(s).map_err(|_| "shebang must be UTF-8")?;
			let mut words = s.split_ascii_whitespace();
			let first = words.next().unwrap();
			let mut c = if first.starts_with('/') {
				Command::new(format!(
					"{}{}",
					env::var("SHEBANG")
						.unwrap_or_default()
						.trim_end_matches(|c| c == '/' || c == '\\'),
					first,
				))
			} else {
				Command::new(first)
			};
			c.args(words).arg(&file).args(args);
			c
		}
	};

	let stat = c.status()?;
	Ok(stat.code().unwrap_or(-1))
}

fn main() {
	std::process::exit(run().unwrap_or_else(|e| {
		eprintln!("error shebang: {e}");
		-2
	}));
}
